package jaya.jaramillo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EspecialistaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaAllPropertiesEquals(Especialista expected, Especialista actual) {
        assertEspecialistaAutoGeneratedPropertiesEquals(expected, actual);
        assertEspecialistaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaAllUpdatablePropertiesEquals(Especialista expected, Especialista actual) {
        assertEspecialistaUpdatableFieldsEquals(expected, actual);
        assertEspecialistaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaAutoGeneratedPropertiesEquals(Especialista expected, Especialista actual) {
        assertThat(expected)
            .as("Verify Especialista auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaUpdatableFieldsEquals(Especialista expected, Especialista actual) {
        assertThat(expected)
            .as("Verify Especialista relevant properties")
            .satisfies(e -> assertThat(e.getEspecialidad()).as("check especialidad").isEqualTo(actual.getEspecialidad()))
            .satisfies(e -> assertThat(e.getCodigoDoctor()).as("check codigoDoctor").isEqualTo(actual.getCodigoDoctor()))
            .satisfies(e -> assertThat(e.getNroConsultorio()).as("check nroConsultorio").isEqualTo(actual.getNroConsultorio()))
            .satisfies(e -> assertThat(e.getFotoUrl()).as("check fotoUrl").isEqualTo(actual.getFotoUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEspecialistaUpdatableRelationshipsEquals(Especialista expected, Especialista actual) {
        assertThat(expected)
            .as("Verify Especialista relationships")
            .satisfies(e -> assertThat(e.getSujeto()).as("check sujeto").isEqualTo(actual.getSujeto()));
    }
}
