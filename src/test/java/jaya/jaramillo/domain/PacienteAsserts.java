package jaya.jaramillo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PacienteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAllPropertiesEquals(Paciente expected, Paciente actual) {
        assertPacienteAutoGeneratedPropertiesEquals(expected, actual);
        assertPacienteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAllUpdatablePropertiesEquals(Paciente expected, Paciente actual) {
        assertPacienteUpdatableFieldsEquals(expected, actual);
        assertPacienteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteAutoGeneratedPropertiesEquals(Paciente expected, Paciente actual) {
        assertThat(expected)
            .as("Verify Paciente auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteUpdatableFieldsEquals(Paciente expected, Paciente actual) {
        assertThat(expected)
            .as("Verify Paciente relevant properties")
            .satisfies(e -> assertThat(e.getNroHistoria()).as("check nroHistoria").isEqualTo(actual.getNroHistoria()))
            .satisfies(e ->
                assertThat(e.getNombreRepresentante()).as("check nombreRepresentante").isEqualTo(actual.getNombreRepresentante())
            )
            .satisfies(e ->
                assertThat(e.getParentescoRepresentante())
                    .as("check parentescoRepresentante")
                    .isEqualTo(actual.getParentescoRepresentante())
            )
            .satisfies(e ->
                assertThat(e.getCorreoRepresentante()).as("check correoRepresentante").isEqualTo(actual.getCorreoRepresentante())
            )
            .satisfies(e ->
                assertThat(e.getCelularRepresentante()).as("check celularRepresentante").isEqualTo(actual.getCelularRepresentante())
            )
            .satisfies(e ->
                assertThat(e.getDireccionRepresentante()).as("check direccionRepresentante").isEqualTo(actual.getDireccionRepresentante())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPacienteUpdatableRelationshipsEquals(Paciente expected, Paciente actual) {
        assertThat(expected)
            .as("Verify Paciente relationships")
            .satisfies(e -> assertThat(e.getSujeto()).as("check sujeto").isEqualTo(actual.getSujeto()));
    }
}
